from django.shortcuts import render
from django.http import JsonResponse
from django.contrib.auth.decorators import login_required
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django.core.files.storage import default_storage
from django.core.files.base import ContentFile
import json
import os
import mimetypes
import re
from datetime import datetime
import io
from .models import ChatSession, ChatMessage, FileAttachment
from .services.rag_chatbot_service import RAGChatbotService
try:
    from .services.autogen_education_system import EnhancedEducationSystem
    AUTOGEN_AVAILABLE = True
except ImportError:
    AUTOGEN_AVAILABLE = False
    print("AutoGen not available, using RAG only")

def chatbot_view(request):
    """View ch√≠nh cho chatbot"""
    if request.method == 'POST':
        message = request.POST.get('message', '')
        user_id = request.user.id if request.user.is_authenticated else None
        
        # Kh·ªüi t·∫°o RAG service t·ª´ Chatbot app
        rag_service = RAGChatbotService()
        
        if user_id:
            # S·ª≠ d·ª•ng c·∫£ d·ªØ li·ªáu c√° nh√¢n v√† chung
            response = rag_service.answer_question_with_user_context(message, str(user_id))
        else:
            # Ch·ªâ s·ª≠ d·ª•ng d·ªØ li·ªáu chung
            response = rag_service.answer_question(message)
        
        return JsonResponse({'response': response})
    
    return render(request, 'chatbot.html')

@csrf_exempt
@require_http_methods(["POST"])
def upload_file(request):
    """API endpoint ƒë·ªÉ upload file"""
    try:
        if 'file' not in request.FILES:
            return JsonResponse({
                'success': False,
                'error': 'Kh√¥ng c√≥ file ƒë∆∞·ª£c upload'
            }, status=400)
        
        uploaded_file = request.FILES['file']
        session_id = request.POST.get('session_id', '')
        user_id = request.user.id if request.user.is_authenticated else None
        
        # Validate file size (max 500MB)
        if uploaded_file.size > 500 * 1024 * 1024:
            return JsonResponse({
                'success': False,
                'error': 'File qu√° l·ªõn. K√≠ch th∆∞·ªõc t·ªëi ƒëa l√† 500MB'
            }, status=400)
        
        # Get or create session
        if session_id:
            session, created = ChatSession.objects.get_or_create(
                session_id=session_id,
                defaults={'user_id': user_id, 'title': 'Chat with Files'}
            )
        else:
            session = ChatSession.objects.create(
                user_id=user_id,
                title='Chat with Files'
            )
            session_id = session.session_id
        
        # Determine file type
        mime_type, _ = mimetypes.guess_type(uploaded_file.name)
        if not mime_type:
            mime_type = 'application/octet-stream'
        
        # Create a temporary message for file attachment (will be replaced when user sends message)
        temp_message = ChatMessage.objects.create(
            session=session,
            message_type='user',
            content=f'[File uploaded: {uploaded_file.name}]'
        )
        
        # Create file attachment
        attachment = FileAttachment.objects.create(
            message=temp_message,
            file=uploaded_file,
            original_name=uploaded_file.name,
            file_type=FileAttachment().get_file_type_from_mime(mime_type),
            file_size=uploaded_file.size,
            mime_type=mime_type
        )
        
        return JsonResponse({
            'success': True,
            'file_id': attachment.id,
            'file_name': attachment.original_name,
            'file_size': attachment.get_file_size_display(),
            'file_type': attachment.file_type,
            'session_id': session_id,
            'message': 'File uploaded successfully'
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)

@csrf_exempt
@require_http_methods(["POST"])
def chatbot_api(request):
    """API endpoint cho RAG chatbot"""
    try:
        data = json.loads(request.body)
        user_message = data.get('message', '')
        session_id = data.get('session_id', '')
        user_id = data.get('user_id', None)
        file_ids = data.get('file_ids', [])  # List of file IDs attached to this message
        
        if not user_message.strip() and not file_ids:
            return JsonResponse({
                'success': False,
                'error': 'Message ho·∫∑c file kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
            })
        
        # Get or create session
        if session_id:
            session, created = ChatSession.objects.get_or_create(
                session_id=session_id,
                defaults={'user_id': user_id, 'title': 'Chat with Files'}
            )
        else:
            session = ChatSession.objects.create(
                user_id=user_id,
                title='Chat with Files'
            )
            session_id = session.session_id
        
        # Create user message
        user_msg = ChatMessage.objects.create(
            session=session,
            message_type='user',
            content=user_message
        )
        
        # Attach files to message if any
        if file_ids:
            attachments = FileAttachment.objects.filter(id__in=file_ids)
            for attachment in attachments:
                # Create a copy of the attachment for this message
                FileAttachment.objects.create(
                    message=user_msg,
                    file=attachment.file,
                    original_name=attachment.original_name,
                    file_type=attachment.file_type,
                    file_size=attachment.file_size,
                    mime_type=attachment.mime_type
                )
                # Delete the temporary message that was created during upload
                if attachment.message.content.startswith('[File uploaded:'):
                    attachment.message.delete()
        
        # Ph√¢n bi·ªát gi·ªØa sinh file v√† chat th∆∞·ªùng
        try:
            # Ki·ªÉm tra xem c√≥ ph·∫£i y√™u c·∫ßu t·∫°o file kh√¥ng
            file_creation_keywords = ['t·∫°o b√†i gi·∫£ng', 't·∫°o b√†i t·∫≠p', 't·∫°o b√†i ki·ªÉm tra', 't·∫°o ƒë·ªÅ thi', 't·∫°o lesson', 't·∫°o exercise', 't·∫°o test']
            is_file_creation = any(keyword in user_message.lower() for keyword in file_creation_keywords)
            
            if is_file_creation and AUTOGEN_AVAILABLE:
                # S·ª≠ d·ª•ng AutoGen ƒë·ªÉ t·∫°o n·ªôi dung file
                print(f"ü§ñ S·ª≠ d·ª•ng AutoGen cho: {user_message}")
                enhanced_system = EnhancedEducationSystem()
                result = enhanced_system.process_request(user_message, str(user_id) if user_id else None, use_autogen=True)
                
                if result['success']:
                    bot_response = result['result']
                    # Th√™m th√¥ng tin v·ªÅ lo·∫°i AI ƒë∆∞·ª£c s·ª≠ d·ª•ng
                    intent_display = {
                        'lecture': 'üìö AI Agent - T·∫°o b√†i gi·∫£ng',
                        'exercise': 'üìù AI Agent - T·∫°o b√†i t·∫≠p', 
                        'test': 'üìã AI Agent - T·∫°o b√†i ki·ªÉm tra',
                        'study': 'üß† AI Agent - Tr·ª£ l√Ω h·ªçc t·∫≠p',
                    }
                    display_intent = intent_display.get(result['intent'], f"ü§ñ AI Agent - {result['intent']}")
                    bot_response = f"[{display_intent}]\n\n{bot_response}"
                else:
                    # Fallback v·ªÅ RAG n·∫øu AutoGen th·∫•t b·∫°i
                    print("‚ö†Ô∏è AutoGen th·∫•t b·∫°i, fallback v·ªÅ RAG")
                    rag_service = RAGChatbotService()
                    if user_id:
                        bot_response = rag_service.answer_question_with_user_context(user_message, str(user_id))
                    else:
                        bot_response = rag_service.answer_question(user_message)
                    bot_response = f"[‚ö†Ô∏è RAG Fallback]\n\n{bot_response}"
            else:
                # S·ª≠ d·ª•ng RAG cho chat th∆∞·ªùng
                print(f"üîç S·ª≠ d·ª•ng RAG cho: {user_message}")
                rag_service = RAGChatbotService()
                
                if user_id:
                    # S·ª≠ d·ª•ng c·∫£ d·ªØ li·ªáu c√° nh√¢n v√† chung
                    bot_response = rag_service.answer_question_with_user_context(user_message, str(user_id))
                else:
                    # Ch·ªâ s·ª≠ d·ª•ng d·ªØ li·ªáu chung
                    bot_response = rag_service.answer_question(user_message)
                    
                bot_response = f"[üîç RAG Chatbot]\n\n{bot_response}"
            
            # Create bot message
            bot_msg = ChatMessage.objects.create(
                session=session,
                message_type='bot',
                content=bot_response
            )
            
            # Check if response contains file creation request
            generated_files = []
            if is_file_creation:
                # T·∫°o file t·ª´ n·ªôi dung AutoGen ho·∫∑c RAG
                generated_file = generate_content_file(user_message, bot_response, session)
                if generated_file:
                    generated_files.append({
                        'id': generated_file.id,
                        'name': generated_file.original_name,
                        'size': generated_file.get_file_size_display(),
                        'type': generated_file.file_type,
                        'download_url': f'/chatbot/download-file/{generated_file.id}/'
                    })
            
            return JsonResponse({
                'success': True,
                'response': {
                    'text': bot_response,
                    'type': 'autogen_response' if is_file_creation and AUTOGEN_AVAILABLE else 'rag_response',
                    'files': generated_files
                },
                'session_id': session_id,
                'message_id': user_msg.id
            })
        except Exception as e:
            print(f"L·ªói trong RAG chatbot: {e}")
            
            # Fallback response
            simple_response = f"Xin l·ªói, t√¥i hi·ªán kh√¥ng th·ªÉ x·ª≠ l√Ω c√¢u h·ªèi '{user_message}'. H·ªá th·ªëng chatbot ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau."
            
            # Create bot message
            bot_msg = ChatMessage.objects.create(
                session=session,
                message_type='bot',
                content=simple_response
            )
            
            return JsonResponse({
                'success': True,
                'response': {
                    'text': simple_response,
                    'type': 'simple_response'
                },
                'session_id': session_id,
                'message_id': user_msg.id
            })
        
    except json.JSONDecodeError:
        return JsonResponse({
            'success': False,
            'error': 'Invalid JSON data'
        }, status=400)
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)

@login_required
def user_profile_view(request):
    """View ƒë·ªÉ xem profile c·ªßa user"""
    rag_service = RAGChatbotService()
    profile = rag_service.get_user_profile(str(request.user.id))
    
    return JsonResponse(profile or {'error': 'No profile found'})

@login_required
def list_users_view(request):
    """View ƒë·ªÉ li·ªát k√™ t·∫•t c·∫£ users c√≥ embeddings (ch·ªâ admin)"""
    if not request.user.is_staff:
        return JsonResponse({'error': 'Permission denied'})
    
    rag_service = RAGChatbotService()
    users = rag_service.list_users_with_embeddings()
    
    return JsonResponse({'users': users})

def generate_content_file(user_message, bot_response, session):
    """Generate a downloadable HTML file based on chatbot response"""
    try:
        # Determine file type based on user request
        file_type = 'document'
        file_extension = '.html'
        mime_type = 'text/html'
        
        if any(keyword in user_message.lower() for keyword in ['b√†i gi·∫£ng', 'lesson plan']):
            filename = f"Bai_giang_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
            content_type = 'B√†i gi·∫£ng'
            icon_class = 'fas fa-chalkboard-teacher'
            color_class = 'primary'
        elif any(keyword in user_message.lower() for keyword in ['b√†i t·∫≠p', 'exercise']):
            filename = f"Bai_tap_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
            content_type = 'B√†i t·∫≠p'
            icon_class = 'fas fa-tasks'
            color_class = 'success'
        elif any(keyword in user_message.lower() for keyword in ['b√†i ki·ªÉm tra', 'test', 'quiz']):
            filename = f"Bai_kiem_tra_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
            content_type = 'B√†i ki·ªÉm tra'
            icon_class = 'fas fa-question-circle'
            color_class = 'warning'
        else:
            filename = f"Noi_dung_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
            content_type = 'N·ªôi dung'
            icon_class = 'fas fa-file-alt'
            color_class = 'info'
        
        # X·ª≠ l√Ω markdown ƒë·ªÉ t·∫°o HTML ƒë∆°n gi·∫£n, ph√π h·ª£p cho in ·∫•n
        formatted_response = bot_response
        
        # Lo·∫°i b·ªè c√°c tag AI intent n·∫øu c√≥ (v√≠ d·ª•: [üìö AI Agent - T·∫°o b√†i gi·∫£ng])
        formatted_response = re.sub(r'\[.*?AI Agent.*?\]\n\n', '', formatted_response)
        formatted_response = re.sub(r'\[.*?RAG.*?\]\n\n', '', formatted_response)

        formatted_response = re.sub(r'#### (.*?)(?=\n|$)', lambda m: f'<h4 style="color: #000; font-size: 14pt; font-weight: bold; margin: 18px 0 12px 0; text-transform: uppercase;">{m.group(1).upper()}</h4>', formatted_response)
        # X·ª≠ l√Ω headings ### (H3) - In hoa ƒë·∫ßu m·ª•c ph·ª•
        formatted_response = re.sub(r'### (.*?)(?=\n|$)', lambda m: f'<h3 style="color: #000; font-size: 14pt; font-weight: bold; margin: 18px 0 12px 0; text-transform: uppercase;">{m.group(1).upper()}</h3>', formatted_response)
        
        # X·ª≠ l√Ω headings ## (H2) - In hoa ƒë·∫ßu m·ª•c ch√≠nh 
        formatted_response = re.sub(r'## (.*?)(?=\n|$)', lambda m: f'<h2 style="color: #000; font-size: 16pt; font-weight: bold; margin: 20px 0 15px 0; text-transform: uppercase;">{m.group(1).upper()}</h2>', formatted_response)
        
        # X·ª≠ l√Ω headings # (H1) - In hoa ti√™u ƒë·ªÅ ch√≠nh
        formatted_response = re.sub(r'# (.*?)(?=\n|$)', lambda m: f'<h1 style="color: #000; font-size: 18pt; font-weight: bold; margin: 25px 0 18px 0; text-align: center; text-transform: uppercase; border-bottom: 2px solid #000; padding-bottom: 8px;">{m.group(1).upper()}</h1>', formatted_response)
        
        # X·ª≠ l√Ω c√°c ƒë·∫ßu m·ª•c s·ªë La M√£ (I., II., III., IV., V.) - C·∫£i thi·ªán regex
        formatted_response = re.sub(r'^\s*(I{1,3}V?|IV|V|VI{0,3}|IX|X)\.?\s+(.*?)(?=\n|$)', lambda m: f'<h2 style="color: #000; font-size: 14pt; font-weight: bold; margin: 20px 0 12px 0; text-transform: uppercase;">{m.group(1).upper()}. {m.group(2).upper()}</h2>', formatted_response, flags=re.MULTILINE)
        
        # X·ª≠ l√Ω c√°c ƒë·∫ßu m·ª•c s·ªë (1., 2., 3., ...) - C·∫£i thi·ªán regex ƒë·ªÉ x·ª≠ l√Ω kho·∫£ng tr·∫Øng
        formatted_response = re.sub(r'^\s*(\d+)\.?\s+(.*?)(?=\n|$)', lambda m: f'<h3 style="color: #000; font-size: 12pt; font-weight: bold; margin: 15px 0 10px 0; text-transform: uppercase;">{m.group(1)}. {m.group(2).upper()}</h3>', formatted_response, flags=re.MULTILINE)
        
        # X·ª≠ l√Ω c√°c ƒë·∫ßu m·ª•c c√≥ d·∫•u g·∫°ch ƒë·∫ßu d√≤ng (-) - Th√™m format n√†y
        formatted_response = re.sub(r'^\s*-\s+(.*?)(?=\n|$)', lambda m: f'<li style="margin: 8px 0; padding-left: 10px; list-style-type: disc;">{m.group(1)}</li>', formatted_response, flags=re.MULTILINE)
        
        # X·ª≠ l√Ω c√°c ƒë·∫ßu m·ª•c c√≥ d·∫•u ch·∫•m (‚Ä¢) - Th√™m format n√†y
        formatted_response = re.sub(r'^\s*‚Ä¢\s+(.*?)(?=\n|$)', lambda m: f'<li style="margin: 8px 0; padding-left: 10px; list-style-type: circle;">{m.group(1)}</li>', formatted_response, flags=re.MULTILINE)
        
        # B·ªçc c√°c list items trong ul tags
        formatted_response = re.sub(r'(<li.*?</li>)(?=\s*<li|$)', r'<ul>\1</ul>', formatted_response, flags=re.DOTALL)
        
        # X·ª≠ l√Ω d·∫•u g·∫°ch ngang
        formatted_response = formatted_response.replace('---', '<hr style="border: none; border-top: 1px solid #000; margin: 20px 0;">')
        
        # X·ª≠ l√Ω xu·ªëng d√≤ng
        formatted_response = formatted_response.replace('\n', '<br>')
        
        # Create HTML content v·ªõi style ƒë∆°n gi·∫£n, ph√π h·ª£p cho in ·∫•n
        html_content = f"""<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{content_type} - STEMIND AI</title>
    <style>
        body {{
            font-family: 'Times New Roman', serif;
            line-height: 1.6;
            color: #000;
            background: white;
            margin: 0;
            padding: 40px;
            font-size: 12pt;
        }}
        .container {{
            max-width: 800px;
            margin: 0 auto;
            background: white;
        }}
        .header {{
            text-align: center;
            margin-bottom: 40px;
            border-bottom: 2px solid #000;
            padding-bottom: 20px;
        }}
        .title {{
            color: #000;
            font-size: 20pt;
            font-weight: bold;
            margin-bottom: 10px;
            text-transform: uppercase;
        }}
        .subtitle {{
            color: #666;
            font-size: 12pt;
            font-style: italic;
        }}
        .content {{
            text-align: justify;
            line-height: 1.8;
        }}
        h1 {{
            color: #000;
            font-size: 18pt;
            font-weight: bold;
            margin: 25px 0 18px 0;
            text-align: center;
            text-transform: uppercase;
            border-bottom: 2px solid #000;
            padding-bottom: 8px;
        }}
        h2 {{
            color: #000;
            font-size: 16pt;
            font-weight: bold;
            margin: 20px 0 15px 0;
            text-transform: uppercase;
        }}
        h3 {{
            color: #000;
            font-size: 14pt;
            font-weight: bold;
            margin: 18px 0 12px 0;
            text-transform: uppercase;
        }}
        ul, ol {{
            margin: 15px 0;
            padding-left: 30px;
        }}
        li {{
            margin: 8px 0;
            display: list-item;
        }}
        /* ƒê·∫£m b·∫£o list items ƒë∆∞·ª£c hi·ªÉn th·ªã ƒë√∫ng */
        .content li {{
            margin: 8px 0;
            padding-left: 10px;
            list-style-position: outside;
        }}
        hr {{
            border: none;
            border-top: 1px solid #000;
            margin: 20px 0;
        }}
        .footer {{
            margin-top: 40px;
            text-align: center;
            color: #666;
            font-size: 10pt;
            border-top: 1px solid #000;
            padding-top: 20px;
        }}
        strong {{
            font-weight: bold;
        }}
        em {{
            font-style: italic;
        }}
        @media print {{
            body {{
                padding: 20px;
                font-size: 11pt;
            }}
            .container {{
                max-width: none;
            }}
            .header {{
                page-break-after: avoid;
            }}
            h1, h2, h3 {{
                page-break-after: avoid;
            }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="title">{content_type}</div>
            <div class="subtitle">{user_message}</div>
        </div>
        
        <div class="content">
            {formatted_response}
        </div>
        
        <div class="footer">
            <small>STEMIND c·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i</small>
        </div>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
<script>
            alert('Nh·∫•n t·ªï h·ª£p ph√≠m Ctrl + P ƒë·ªÉ in ra');
            alert('Nh·∫•n t·ªï h·ª£p ph√≠m Ctrl + S ƒë·ªÉ l∆∞u file');
</script>
</html>"""
        
        # Create file object
        file_obj = ContentFile(html_content.encode('utf-8'))
        file_obj.name = filename
        
        # Create a bot message for the file
        file_message = ChatMessage.objects.create(
            session=session,
            message_type='bot',
            content=f'ƒê√£ t·∫°o file HTML: {filename}'
        )
        
        # Create file attachment
        attachment = FileAttachment.objects.create(
            message=file_message,
            file=file_obj,
            original_name=filename,
            file_type=file_type,
            file_size=len(html_content.encode('utf-8')),
            mime_type=mime_type
        )
        
        return attachment
        
    except Exception as e:
        print(f"Error generating file: {e}")
        return None

def chatbot_page(request):
    """Trang giao di·ªán chatbot"""
    return render(request, 'chatbot.html')

@login_required
def download_chat_file(request, file_id):
    """Download file t·ª´ chatbot s·ª≠ d·ª•ng S3 presigned URL"""
    try:
        from django.http import HttpResponseRedirect, JsonResponse
        from django.conf import settings
        
        # L·∫•y file attachment
        attachment = FileAttachment.objects.get(id=file_id)
        
        # Ki·ªÉm tra quy·ªÅn truy c·∫≠p - Cho ph√©p t·∫•t c·∫£ user ƒë√£ ƒëƒÉng nh·∫≠p download file
        session = attachment.message.session
        
        # Admin c√≥ th·ªÉ truy c·∫≠p t·∫•t c·∫£ files
        if request.user.is_staff:
            pass
        # User ƒë√£ ƒëƒÉng nh·∫≠p c√≥ th·ªÉ download file
        elif request.user.is_authenticated:
            pass
        else:
            return JsonResponse({
                'success': False,
                'error': 'C·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ download file'
            }, status=403)
        
        # T·∫°o presigned URL t·ª´ S3 v√† redirect
        presigned_url = attachment.get_presigned_url()
        if presigned_url:
            return HttpResponseRedirect(presigned_url)
        else:
            return JsonResponse({
                'success': False,
                'error': 'Kh√¥ng th·ªÉ t·∫°o download link'
            }, status=500)
        
    except FileAttachment.DoesNotExist:
        return JsonResponse({
            'success': False,
            'error': 'File kh√¥ng t·ªìn t·∫°i'
        }, status=404)
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)

@login_required
def list_chat_files(request, session_id=None):
    """Li·ªát k√™ files trong chat session"""
    try:
        if session_id:
            # L·∫•y files c·ªßa session c·ª• th·ªÉ
            session = ChatSession.objects.get(session_id=session_id)
            
            # Cho ph√©p t·∫•t c·∫£ user ƒë√£ ƒëƒÉng nh·∫≠p xem files
            pass
            
            attachments = FileAttachment.objects.filter(message__session=session)
        else:
            # L·∫•y t·∫•t c·∫£ files - Cho ph√©p user th∆∞·ªùng xem t·∫•t c·∫£ files
            if request.user.is_staff:
                attachments = FileAttachment.objects.all()
            else:
                # User th∆∞·ªùng c√≥ th·ªÉ xem t·∫•t c·∫£ files
                attachments = FileAttachment.objects.all()
        
        files_data = []
        for attachment in attachments:
            # T·∫°o presigned URL cho m·ªói file
            download_url = attachment.get_presigned_url()
            
            # Th√™m preview URL cho HTML files
            preview_url = None
            if attachment.is_html():
                preview_url = f'/chatbot/preview-html/{attachment.id}/'
            
            files_data.append({
                'id': attachment.id,
                'name': attachment.original_name,
                'size': attachment.get_file_size_display(),
                'type': attachment.file_type,
                'mime_type': attachment.mime_type,
                'uploaded_at': attachment.uploaded_at.isoformat(),
                'session_id': attachment.message.session.session_id,
                'session_title': attachment.message.session.title,
                'download_url': download_url,
                'file_url': download_url,  # Th√™m file_url ƒë·ªÉ t∆∞∆°ng th√≠ch
                'preview_url': preview_url,  # Th√™m preview URL cho HTML files
                'is_html': attachment.is_html(),  # Th√™m flag ƒë·ªÉ frontend bi·∫øt
            })
        
        return JsonResponse({
            'success': True,
            'files': files_data
        })
        
    except ChatSession.DoesNotExist:
        return JsonResponse({
            'success': False,
            'error': 'Session kh√¥ng t·ªìn t·∫°i'
        }, status=404)
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)

@login_required
def test_download(request, file_id):
    """Test view ƒë·ªÉ ki·ªÉm tra presigned URL"""
    try:
        attachment = FileAttachment.objects.get(id=file_id)
        
        # Ki·ªÉm tra quy·ªÅn truy c·∫≠p
        if not request.user.is_staff and attachment.message.session.user != request.user:
            return JsonResponse({
                'success': False,
                'error': 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p file n√†y'
            }, status=403)
        
        # T·∫°o presigned URL
        presigned_url = attachment.get_presigned_url()
        
        return JsonResponse({
            'success': True,
            'file_info': {
                'id': attachment.id,
                'name': attachment.original_name,
                'size': attachment.get_file_size_display(),
                'type': attachment.file_type,
                'mime_type': attachment.mime_type,
                'presigned_url': presigned_url,
                'file_path': attachment.file.name if attachment.file else None
            }
        })
        
    except FileAttachment.DoesNotExist:
        return JsonResponse({
            'success': False,
            'error': 'File kh√¥ng t·ªìn t·∫°i'
        }, status=404)
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)

@login_required
def preview_html_file(request, file_id):
    """Preview HTML file tr·ª±c ti·∫øp trong browser"""
    try:
        from django.http import HttpResponse
        
        # L·∫•y file attachment
        attachment = FileAttachment.objects.get(id=file_id)
        
        # Ki·ªÉm tra quy·ªÅn truy c·∫≠p
        if not request.user.is_staff and attachment.message.session.user != request.user:
            return JsonResponse({
                'success': False,
                'error': 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p file n√†y'
            }, status=403)
        
        # Ki·ªÉm tra xem c√≥ ph·∫£i HTML file kh√¥ng
        if not attachment.is_html():
            return JsonResponse({
                'success': False,
                'error': 'Ch·ªâ c√≥ th·ªÉ preview HTML files'
            }, status=400)
        
        # ƒê·ªçc n·ªôi dung file
        if hasattr(attachment.file, 'read'):
            attachment.file.seek(0)
            html_content = attachment.file.read().decode('utf-8')
            
            # Tr·∫£ v·ªÅ HTML content
            response = HttpResponse(html_content, content_type='text/html')
            response['Content-Disposition'] = f'inline; filename="{attachment.original_name}"'
            return response
        else:
            return JsonResponse({
                'success': False,
                'error': 'Kh√¥ng th·ªÉ ƒë·ªçc file'
            }, status=500)
        
    except FileAttachment.DoesNotExist:
        return JsonResponse({
            'success': False,
            'error': 'File kh√¥ng t·ªìn t·∫°i'
        }, status=404)
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)
