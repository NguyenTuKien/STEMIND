from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User
from .models import File, Category


class RegisterForm(UserCreationForm):
    class Meta:
        model = User
        fields = ['username', 'email', 'password1', 'password2']
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Add CSS classes for Bootstrap styling
        self.fields['username'].widget.attrs.update({
            'class': 'form-control',
            'placeholder': 'username'
        })
        self.fields['email'].widget.attrs.update({
            'class': 'form-control',
            'placeholder': 'name@example.com'
        })
        self.fields['password1'].widget.attrs.update({
            'class': 'form-control',
            'placeholder': 'password'
        })
        self.fields['password2'].widget.attrs.update({
            'class': 'form-control',
            'placeholder': 'password'
        })


class FileUploadForm(forms.ModelForm):
    class Meta:
        model = File
        fields = ['title', 'categories', 'file_description', 'file_urls', 'file_thumbnail', 'file_status', 'file_price']
        widgets = {
            'title': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Nh·∫≠p ti√™u ƒë·ªÅ t√†i li·ªáu...'
            }),
            'categories': forms.CheckboxSelectMultiple(attrs={
                'class': 'form-check-input'
            }),
            'file_description': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 4,
                'placeholder': 'M√¥ t·∫£ chi ti·∫øt v·ªÅ t√†i li·ªáu...'
            }),
            'file_urls': forms.FileInput(attrs={
                'class': 'form-control',
                'accept': '.pdf,.doc,.docx,.ppt,.pptx,.xls,.xlsx,.txt,.zip,.rar'
            }),
            'file_thumbnail': forms.FileInput(attrs={
                'class': 'form-control',
                'accept': 'image/*'
            }),
            'file_status': forms.Select(attrs={
                'class': 'form-select',
                'onchange': 'updatePriceVisibility()'
            }),
            'file_price': forms.NumberInput(attrs={
                'class': 'form-control',
                'placeholder': '0',
                'min': '0',
                'step': '1000'
            })
        }
        labels = {
            'title': 'Ti√™u ƒë·ªÅ t√†i li·ªáu',
            'categories': 'Danh m·ª•c',
            'file_description': 'M√¥ t·∫£',
            'file_urls': 'T·ªáp t√†i li·ªáu',
            'file_thumbnail': '·∫¢nh thumbnail (t√πy ch·ªçn)',
            'file_status': 'Tr·∫°ng th√°i',
            'file_price': 'Gi√° (VNƒê)'
        }
        help_texts = {
            'title': 'T√™n t√†i li·ªáu ph·∫£i l√† duy nh·∫•t',
            'categories': 'Ch·ªçn m·ªôt ho·∫∑c nhi·ªÅu danh m·ª•c con (kh√¥ng ch·ªçn danh m·ª•c cha)',
            'file_urls': 'Ch·ªçn file PDF, Word, PowerPoint, Excel, Text, ZIP ho·∫∑c RAR (t·ªëi ƒëa 50MB)',
            'file_thumbnail': 'T·∫£i ·∫£nh ƒë·∫°i di·ªán cho t√†i li·ªáu (t·ªëi ƒëa 5MB)',
            'file_price': 'Nh·∫≠p gi√° b·∫±ng VNƒê (0 = mi·ªÖn ph√≠)'
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # C·∫≠p nh·∫≠t choices cho file_status theo model
        self.fields['file_status'].choices = [(0, 'Free'), (1, 'For sales')]
        
        # Ch·ªâ hi·ªÉn th·ªã categories con (kh√¥ng hi·ªÉn th·ªã categories cha)
        self.fields['categories'].queryset = Category.objects.filter(parent__isnull=False)
        
        # Log file info for debugging
        print(f"üìÅ FileUploadForm initialized with fields: {list(self.fields.keys())}")
        print(f"üìÅ file_status choices: {self.fields['file_status'].choices}")

    def clean_file_urls(self):
        file = self.cleaned_data.get('file_urls')
        
        if file and hasattr(file, 'size'):
            # Ki·ªÉm tra k√≠ch th∆∞·ªõc file (50MB)
            if file.size > 50 * 1024 * 1024:
                raise forms.ValidationError('K√≠ch th∆∞·ªõc file kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 50MB.')
            
            # Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
            allowed_extensions = ['.pdf', '.doc', '.docx', '.ppt', '.pptx', '.xls', '.xlsx', '.txt', '.zip', '.rar']
            file_extension = file.name.lower().split('.')[-1]
            if f'.{file_extension}' not in allowed_extensions:
                raise forms.ValidationError('ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Vui l√≤ng ch·ªçn file PDF, Word, PowerPoint, Excel, Text, ZIP ho·∫∑c RAR.')
        elif not file:
            raise forms.ValidationError('Vui l√≤ng ch·ªçn t·ªáp ƒë·ªÉ t·∫£i l√™n.')
            
        return file

    def clean_file_thumbnail(self):
        thumbnail = self.cleaned_data.get('file_thumbnail')
        
        if thumbnail and hasattr(thumbnail, 'size'):
            # Ki·ªÉm tra k√≠ch th∆∞·ªõc ·∫£nh (5MB)
            if thumbnail.size > 5 * 1024 * 1024:
                raise forms.ValidationError('K√≠ch th∆∞·ªõc ·∫£nh kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 5MB.')
            
            # Ki·ªÉm tra ƒë·ªãnh d·∫°ng ·∫£nh
            allowed_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp']
            file_extension = thumbnail.name.lower().split('.')[-1]
            if f'.{file_extension}' not in allowed_extensions:
                raise forms.ValidationError('ƒê·ªãnh d·∫°ng ·∫£nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Vui l√≤ng ch·ªçn file JPG, PNG, GIF ho·∫∑c WEBP.')
                
        return thumbnail

    def clean_file_price(self):
        price = self.cleaned_data.get('file_price')
        status = self.cleaned_data.get('file_status')
        
        # Ki·ªÉm tra gi√° khi status = For sales
        if status == 1 and (price is None or price <= 0):
            raise forms.ValidationError('Vui l√≤ng nh·∫≠p gi√° cho t√†i li·ªáu c√≥ ph√≠.')
        
        if price is not None and price < 0:
            raise forms.ValidationError('Gi√° kh√¥ng ƒë∆∞·ª£c √¢m.')
            
        return price or 0

    def clean_title(self):
        title = self.cleaned_data.get('title')
        
        # Ki·ªÉm tra tr√πng l·∫∑p title (tr·ª´ ch√≠nh n√≥ n·∫øu ƒëang edit)
        if File.objects.filter(title=title).exclude(pk=self.instance.pk if self.instance else None).exists():
            raise forms.ValidationError('Ti√™u ƒë·ªÅ n√†y ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn ti√™u ƒë·ªÅ kh√°c.')
            
        return title

    def clean_categories(self):
        categories = self.cleaned_data.get('categories')
        
        # Ki·ªÉm tra xem c√≥ √≠t nh·∫•t m·ªôt category ƒë∆∞·ª£c ch·ªçn
        if not categories:
            raise forms.ValidationError('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt danh m·ª•c.')
        
        # Ki·ªÉm tra xem c√≥ category cha n√†o ƒë∆∞·ª£c ch·ªçn kh√¥ng
        parent_categories = categories.filter(parent__isnull=True)
        if parent_categories.exists():
            raise forms.ValidationError('Kh√¥ng th·ªÉ ch·ªçn danh m·ª•c cha. Vui l√≤ng ch·ªâ ch·ªçn c√°c danh m·ª•c con.')
            
        return categories 