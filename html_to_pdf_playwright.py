#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
HTML to PDF Converter using Playwright
Tool chuy·ªÉn ƒë·ªïi file HTML th√†nh PDF s·ª≠ d·ª•ng Playwright - gi·∫£i ph√°p hi·ªán ƒë·∫°i nh·∫•t
"""

import os
import sys
import asyncio
from pathlib import Path
from playwright.async_api import async_playwright


async def convert_html_to_pdf_async(input_file, output_file=None, options=None):
    """Chuy·ªÉn ƒë·ªïi HTML th√†nh PDF s·ª≠ d·ª•ng Playwright (async)"""
    try:
        # Ki·ªÉm tra file ƒë·∫ßu v√†o
        if not os.path.exists(input_file):
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {input_file}")
            return False
        
        # T·∫°o t√™n file ƒë·∫ßu ra
        if output_file is None:
            input_path = Path(input_file)
            output_file = str(input_path.with_suffix('.pdf'))
        
        # C·∫•u h√¨nh m·∫∑c ƒë·ªãnh cho PDF
        if options is None:
            options = {
                'format': 'A4',
                'margin': {
                    'top': '1in',
                    'right': '1in',
                    'bottom': '1in',
                    'left': '1in'
                },
                'print_background': True,
                'prefer_css_page_size': True
            }
        
        print(f"üìñ ƒêang ƒë·ªçc file: {input_file}")
        
        # Chuy·ªÉn ƒë·ªïi ƒë∆∞·ªùng d·∫´n file th√†nh URL
        file_url = f"file://{os.path.abspath(input_file)}"
        
        async with async_playwright() as p:
            # Kh·ªüi t·∫°o browser
            browser = await p.chromium.launch()
            page = await browser.new_page()
            
            print(f"üîÑ ƒêang t·∫°o PDF: {output_file}")
            
            # ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn file HTML
            await page.goto(file_url, wait_until='networkidle')
            
            # ƒê·ª£i th√™m m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o CSS v√† JavaScript load xong
            await page.wait_for_timeout(1000)
            
            # T·∫°o PDF
            await page.pdf(path=output_file, **options)
            
            await browser.close()
            
            print(f"‚úÖ Ho√†n th√†nh! File PDF: {output_file}")
            return True
            
    except Exception as e:
        print(f"‚ùå L·ªói: {str(e)}")
        return False


def convert_html_to_pdf(input_file, output_file=None, options=None):
    """Wrapper function ƒë·ªÉ ch·∫°y async function"""
    return asyncio.run(convert_html_to_pdf_async(input_file, output_file, options))


async def convert_directory_async(input_dir, output_dir=None, options=None):
    """Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ file HTML trong th∆∞ m·ª•c (async)"""
    input_path = Path(input_dir)
    
    if not input_path.exists():
        print(f"‚ùå Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {input_dir}")
        return False
    
    # T·∫°o th∆∞ m·ª•c ƒë·∫ßu ra
    if output_dir:
        output_path = Path(output_dir)
        output_path.mkdir(parents=True, exist_ok=True)
    
    # T√¨m file HTML
    html_files = list(input_path.glob("*.html")) + list(input_path.glob("*.htm"))
    
    if not html_files:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file HTML n√†o trong: {input_dir}")
        return False
    
    print(f"üîç T√¨m th·∫•y {len(html_files)} file HTML")
    
    success_count = 0
    for html_file in html_files:
        if output_dir:
            output_file = str(Path(output_dir) / f"{html_file.stem}.pdf")
        else:
            output_file = str(html_file.with_suffix('.pdf'))
        
        print(f"\nüìÑ X·ª≠ l√Ω: {html_file.name}")
        if await convert_html_to_pdf_async(str(html_file), output_file, options):
            success_count += 1
    
    print(f"\nüéâ Ho√†n th√†nh! {success_count}/{len(html_files)} file th√†nh c√¥ng")
    return success_count == len(html_files)


def convert_directory(input_dir, output_dir=None, options=None):
    """Wrapper function ƒë·ªÉ ch·∫°y async function"""
    return asyncio.run(convert_directory_async(input_dir, output_dir, options))


def show_help():
    """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"""
    print("üîÑ HTML to PDF Converter using Playwright")
    print("=" * 50)
    print("C√°ch s·ª≠ d·ª•ng:")
    print("  python html_to_pdf_playwright.py <file.html>")
    print("  python html_to_pdf_playwright.py <file.html> <output.pdf>")
    print("  python html_to_pdf_playwright.py <th∆∞_m·ª•c> -d")
    print("  python html_to_pdf_playwright.py <th∆∞_m·ª•c> -d <th∆∞_m·ª•c_ƒë·∫ßu_ra>")
    print("\nV√≠ d·ª•:")
    print("  python html_to_pdf_playwright.py document.html")
    print("  python html_to_pdf_playwright.py document.html output.pdf")
    print("  python html_to_pdf_playwright.py ./html_files -d")
    print("  python html_to_pdf_playwright.py ./html_files -d ./pdf_files")
    print("\nüìã Y√™u c·∫ßu:")
    print("  - playwright: pip install playwright")
    print("  - playwright install chromium")


def main():
    """H√†m ch√≠nh"""
    if len(sys.argv) < 2:
        show_help()
        return
    
    input_path = sys.argv[1]
    
    # Ch·∫ø ƒë·ªô th∆∞ m·ª•c
    if len(sys.argv) > 2 and sys.argv[2] == '-d':
        output_dir = sys.argv[3] if len(sys.argv) > 3 else None
        convert_directory(input_path, output_dir)
    else:
        # Ch·∫ø ƒë·ªô file ƒë∆°n l·∫ª
        output_file = sys.argv[2] if len(sys.argv) > 2 else None
        convert_html_to_pdf(input_path, output_file)


if __name__ == "__main__":
    main()
